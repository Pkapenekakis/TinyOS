#include <stdio.h>
#include "micropulse.h"

module MicroPulseC {
    uses interface Random; 
    uses interface Packet;
    uses interface AMSend as AMSendP1; // For Phase 1
    uses interface AMSend as AMSendP2; // For Phase 2
    uses interface Receive as ReceiveP1; // For Phase 1
    uses interface Receive as ReceiveP2; // For Phase 2
    provides interface MicroPulse;
}

implementation {
    uint16_t childMaxValue; //critical Path
    uint16_t load;
    uint16_t taskParentID;
    uint8_t nodePhase = 0; //0-> phase 1, 1->phase 2 only used in Phase2 Functions
    message_t output; //Needs to be declared here in order for the sendData task to work
    bool sendBusy = FALSE; //Flag to track if we are seding data at the moment
    bool alreadySentData = FALSE;


    /********************************************************************
    Generating Loads Functions
    ********************************************************************/

    //Reads a Random Number from the file seed.txt that is generated by the python Script
    //Is used to seed the random Number generation.
    uint32_t readSeedFromFile() {
        uint32_t seed = 0;
        FILE* file = fopen("seed.txt", "r");
        if (file != NULL) {
            fscanf(file, "%u", &seed);
            fclose(file);
        }else{
            dbg("CustomAggregationFunction", "Failed to read seed.txt, using default seed (1). \n");
            seed = 1;  // Default seed
        }
        return seed;
    }

    //Generates a random load between 20 and 60 inclusive
    command void MicroPulse.generateLoad(){
        uint32_t seed = readSeedFromFile();

        load = 20 + (call Random.rand16() + seed ) % 41;
        dbg("generateValues", "Node: %d had load generated: %d \n",TOS_NODE_ID, load);
    }


    /********************************************************************
    Send Functions for Phase 1
    ********************************************************************/

    //Sends a message to parent about the criticalPath
    task void sendCriticalPathToParentTask() {
        static error_t sendError;
        micropulseP1_t* payload;

        if(sendBusy){
            dbg("Phase1CriticalPathTask", "Send already in progress for node %d\n", TOS_NODE_ID);
            return;
        }

        sendBusy = TRUE; //A send is starting

        // Prepare the message
        payload = (micropulseP1_t*) call Packet.getPayload(&output, sizeof(micropulseP1_t));
        if (payload == NULL) {
            dbg("Phase1CriticalPathTask", "Node %d: Failed to get payload!\n", TOS_NODE_ID);
            sendBusy = FALSE;
            post sendCriticalPathToParentTask();  // Retry
        }

        atomic {
            payload->criticalValue = childMaxValue + load;
        }

        dbg("Phase1CriticalPathTask", "Sending CriticalPath to: %d\n", childMaxValue + load);

        sendError = call AMSendP1.send(taskParentID, &output, sizeof(micropulseP1_t));
        if (sendError != SUCCESS) {
            dbg("Phase1CriticalPathTask", "Node %d: Send failed, reposting task\n", TOS_NODE_ID);
            sendBusy = FALSE; // Reset flag
            post sendCriticalPathToParentTask();  // Retry
        }
    }

    //Propagate Critical Path to Parent (Phase 1)
    command void MicroPulse.propagateCriticalPathToParent(uint16_t parentID) {
        taskParentID = parentID;

        post sendCriticalPathToParentTask();
    }


    event void AMSendP1.sendDone(message_t* msg, error_t err) {
        sendBusy = FALSE; //Reset the flag since message sent
        if (err == SUCCESS) {
            dbg("Phase1CriticalPathTask", "Node %d: Message sent successfully to parent!\n", TOS_NODE_ID);
        } else {
            dbg("Phase1CriticalPathTask", "Node %d:  Message send failed in sendDone, reposting task\n", TOS_NODE_ID);
            post sendCriticalPathToParentTask();  //Retry on failure
        }
    }

    /********************************************************************
    Receive Functions for Phase 1
    ********************************************************************/

    //Receive data from father nodes
    event message_t* ReceiveP1.receive(message_t* msg, void* payload, uint8_t len) {
        micropulseP1_t receivedData = *(micropulseP1_t*)payload;
        //uint16_t lastMax;
        uint16_t receivedMax;

        if (payload == NULL) {
            dbg("Phase1Receive", "Received null payload\n");
            return msg;
        }

        //lastMax = maxValue; //Since maxValue changes as values are received keep track of the original in case it was greater
        receivedMax = receivedData.criticalValue;


        dbg("Phase1Receive", "Node %d: Received data: critPath: %d \n",TOS_NODE_ID, receivedMax );

        if(childMaxValue < receivedMax){
            childMaxValue = receivedMax;
        }
   

        return msg;
    }

    /********************************************************************
    Send Functions for Phase 2
    ********************************************************************/

    //Sends a message to children about the criticalPath -- IS PHASE 2
    task void sendCriticalPathTask() {
        static error_t sendError;
        micropulseP2_t* payload;

        if(alreadySentData){
            return;
        }

        if(sendBusy){
            dbg("Phase2PathPropagation", "Send already in progress for node %d\n", TOS_NODE_ID);
            return;
        }

        sendBusy = TRUE; //A send is starting

        // Prepare the message
        payload = (micropulseP2_t*) call Packet.getPayload(&output, sizeof(micropulseP2_t));

        if (payload == NULL) {
            dbg("Phase2PathPropagation", "Failed to get payload!\n");
            sendBusy = FALSE;
            post sendCriticalPathTask();  // Retry
        }

        atomic {
            payload->phase = 1; //Change to phase2
            payload->criticalValue = childMaxValue;
        }

        dbg("Phase2PathPropagation", "Propagating critical value to children: %u\n", childMaxValue);

        sendError = call AMSendP2.send(AM_BROADCAST_ADDR, &output, sizeof(micropulseP2_t));
        if (sendError != SUCCESS) {
            dbg("Phase2PathPropagation", "Send failed, reposting task\n");
            sendBusy = FALSE;
            post sendCriticalPathTask();  // Retry
        }
    }

    event void AMSendP2.sendDone(message_t* msg, error_t err) {
        sendBusy = FALSE; //Reset the flag since message sent
        if (err == SUCCESS) {
            alreadySentData = TRUE;    
            dbg("Phase2PathPropagation", "Critical Path sent successfully!\n");
        } else {
            dbg("Phase2PathPropagation", "Message send failed in sendDone, reposting task\n");
            post sendCriticalPathTask();  //Retry on failure
        }
    }

    /********************************************************************
    Receive Functions for Phase 2
    ********************************************************************/

    //Receive data from father nodes
    event message_t* ReceiveP2.receive(message_t* msg, void* payload, uint8_t len) {
        micropulseP2_t receivedData = *(micropulseP2_t*)payload;

        if (payload == NULL) {
            dbg("Phase2Receive", "Received null payload\n");
            return msg;
        }

        childMaxValue = receivedData.criticalValue;
        nodePhase = receivedData.phase;

        dbg("Phase2Receive","Node: %d collected criticalPath Value: %d\n", TOS_NODE_ID, childMaxValue);

        post sendCriticalPathTask();
         
        return msg;
    }

    /********************************************************************
    Experimental Solution
    ********************************************************************/

    //Only called by Node 0
    command void MicroPulse.finalizePhaseOne(){
        dbg("Phase2Receive", "\n Node: %d changes phase \n", TOS_NODE_ID);
        nodePhase = 1;
        post sendCriticalPathTask();
    }

   























}
